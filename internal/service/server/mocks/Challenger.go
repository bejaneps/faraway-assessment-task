// Code generated by mockery v2.23.4. DO NOT EDIT.

package server

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	transport "github.com/bejaneps/faraway-assessment-task/internal/pkg/transport"
)

// Challenger is an autogenerated mock type for the Challenger type
type Challenger struct {
	mock.Mock
}

type Challenger_Expecter struct {
	mock *mock.Mock
}

func (_m *Challenger) EXPECT() *Challenger_Expecter {
	return &Challenger_Expecter{mock: &_m.Mock}
}

// Challenge provides a mock function with given fields: ctx, rw
func (_m *Challenger) Challenge(ctx context.Context, rw transport.ReadWriter) error {
	ret := _m.Called(ctx, rw)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transport.ReadWriter) error); ok {
		r0 = rf(ctx, rw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Challenger_Challenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Challenge'
type Challenger_Challenge_Call struct {
	*mock.Call
}

// Challenge is a helper method to define mock.On call
//   - ctx context.Context
//   - rw transport.ReadWriter
func (_e *Challenger_Expecter) Challenge(ctx interface{}, rw interface{}) *Challenger_Challenge_Call {
	return &Challenger_Challenge_Call{Call: _e.mock.On("Challenge", ctx, rw)}
}

func (_c *Challenger_Challenge_Call) Run(run func(ctx context.Context, rw transport.ReadWriter)) *Challenger_Challenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transport.ReadWriter))
	})
	return _c
}

func (_c *Challenger_Challenge_Call) Return(_a0 error) *Challenger_Challenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Challenger_Challenge_Call) RunAndReturn(run func(context.Context, transport.ReadWriter) error) *Challenger_Challenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewChallenger creates a new instance of Challenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Challenger {
	mock := &Challenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
