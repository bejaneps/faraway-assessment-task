// Code generated by mockery v2.23.4. DO NOT EDIT.

package transport

import mock "github.com/stretchr/testify/mock"

// ReadWriter is an autogenerated mock type for the ReadWriter type
type ReadWriter struct {
	mock.Mock
}

type ReadWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadWriter) EXPECT() *ReadWriter_Expecter {
	return &ReadWriter_Expecter{mock: &_m.Mock}
}

// ReadMessage provides a mock function with given fields:
func (_m *ReadWriter) ReadMessage() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadWriter_ReadMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadMessage'
type ReadWriter_ReadMessage_Call struct {
	*mock.Call
}

// ReadMessage is a helper method to define mock.On call
func (_e *ReadWriter_Expecter) ReadMessage() *ReadWriter_ReadMessage_Call {
	return &ReadWriter_ReadMessage_Call{Call: _e.mock.On("ReadMessage")}
}

func (_c *ReadWriter_ReadMessage_Call) Run(run func()) *ReadWriter_ReadMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadWriter_ReadMessage_Call) Return(_a0 string, _a1 error) *ReadWriter_ReadMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadWriter_ReadMessage_Call) RunAndReturn(run func() (string, error)) *ReadWriter_ReadMessage_Call {
	_c.Call.Return(run)
	return _c
}

// WriteMessage provides a mock function with given fields: _a0
func (_m *ReadWriter) WriteMessage(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadWriter_WriteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteMessage'
type ReadWriter_WriteMessage_Call struct {
	*mock.Call
}

// WriteMessage is a helper method to define mock.On call
//   - _a0 string
func (_e *ReadWriter_Expecter) WriteMessage(_a0 interface{}) *ReadWriter_WriteMessage_Call {
	return &ReadWriter_WriteMessage_Call{Call: _e.mock.On("WriteMessage", _a0)}
}

func (_c *ReadWriter_WriteMessage_Call) Run(run func(_a0 string)) *ReadWriter_WriteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReadWriter_WriteMessage_Call) Return(_a0 error) *ReadWriter_WriteMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReadWriter_WriteMessage_Call) RunAndReturn(run func(string) error) *ReadWriter_WriteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadWriter creates a new instance of ReadWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadWriter {
	mock := &ReadWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
