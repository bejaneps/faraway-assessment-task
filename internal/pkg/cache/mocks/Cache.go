// Code generated by mockery v2.23.4. DO NOT EDIT.

package cache

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Cache) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Cache_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Cache_Expecter) Close() *Cache_Close_Call {
	return &Cache_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Cache_Close_Call) Run(run func()) *Cache_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Close_Call) Return(_a0 error) *Cache_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Close_Call) RunAndReturn(run func() error) *Cache_Close_Call {
	_c.Call.Return(run)
	return _c
}

// SRandMember provides a mock function with given fields: ctx, key
func (_m *Cache) SRandMember(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_SRandMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRandMember'
type Cache_SRandMember_Call struct {
	*mock.Call
}

// SRandMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) SRandMember(ctx interface{}, key interface{}) *Cache_SRandMember_Call {
	return &Cache_SRandMember_Call{Call: _e.mock.On("SRandMember", ctx, key)}
}

func (_c *Cache_SRandMember_Call) Run(run func(ctx context.Context, key string)) *Cache_SRandMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_SRandMember_Call) Return(_a0 string, _a1 error) *Cache_SRandMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_SRandMember_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Cache_SRandMember_Call {
	_c.Call.Return(run)
	return _c
}

// Seed provides a mock function with given fields: ctx
func (_m *Cache) Seed(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Seed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seed'
type Cache_Seed_Call struct {
	*mock.Call
}

// Seed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Cache_Expecter) Seed(ctx interface{}) *Cache_Seed_Call {
	return &Cache_Seed_Call{Call: _e.mock.On("Seed", ctx)}
}

func (_c *Cache_Seed_Call) Run(run func(ctx context.Context)) *Cache_Seed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cache_Seed_Call) Return(_a0 error) *Cache_Seed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Seed_Call) RunAndReturn(run func(context.Context) error) *Cache_Seed_Call {
	_c.Call.Return(run)
	return _c
}

// client provides a mock function with given fields:
func (_m *Cache) client() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Cache_client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'client'
type Cache_client_Call struct {
	*mock.Call
}

// client is a helper method to define mock.On call
func (_e *Cache_Expecter) client() *Cache_client_Call {
	return &Cache_client_Call{Call: _e.mock.On("client")}
}

func (_c *Cache_client_Call) Run(run func()) *Cache_client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_client_Call) Return(_a0 interface{}) *Cache_client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_client_Call) RunAndReturn(run func() interface{}) *Cache_client_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
