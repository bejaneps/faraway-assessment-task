// Code generated by mockery v2.23.4. DO NOT EDIT.

package db

import (
	context "context"

	pkgdb "github.com/bejaneps/faraway-assessment-task/internal/pkg/db"
	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

type DB_Expecter struct {
	mock *mock.Mock
}

func (_m *DB) EXPECT() *DB_Expecter {
	return &DB_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DB_Expecter) Close() *DB_Close_Call {
	return &DB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DB_Close_Call) Run(run func()) *DB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_Close_Call) Return(_a0 error) *DB_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Close_Call) RunAndReturn(run func() error) *DB_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Seed provides a mock function with given fields: ctx
func (_m *DB) Seed(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Seed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seed'
type DB_Seed_Call struct {
	*mock.Call
}

// Seed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DB_Expecter) Seed(ctx interface{}) *DB_Seed_Call {
	return &DB_Seed_Call{Call: _e.mock.On("Seed", ctx)}
}

func (_c *DB_Seed_Call) Run(run func(ctx context.Context)) *DB_Seed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DB_Seed_Call) Return(_a0 error) *DB_Seed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Seed_Call) RunAndReturn(run func(context.Context) error) *DB_Seed_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: ctx, args
func (_m *DB) Select(ctx context.Context, args pkgdb.SelectArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgdb.SelectArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type DB_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - args pkgdb.SelectArgs
func (_e *DB_Expecter) Select(ctx interface{}, args interface{}) *DB_Select_Call {
	return &DB_Select_Call{Call: _e.mock.On("Select", ctx, args)}
}

func (_c *DB_Select_Call) Run(run func(ctx context.Context, args pkgdb.SelectArgs)) *DB_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgdb.SelectArgs))
	})
	return _c
}

func (_c *DB_Select_Call) Return(_a0 error) *DB_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_Select_Call) RunAndReturn(run func(context.Context, pkgdb.SelectArgs) error) *DB_Select_Call {
	_c.Call.Return(run)
	return _c
}

// client provides a mock function with given fields:
func (_m *DB) client() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// DB_client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'client'
type DB_client_Call struct {
	*mock.Call
}

// client is a helper method to define mock.On call
func (_e *DB_Expecter) client() *DB_client_Call {
	return &DB_client_Call{Call: _e.mock.On("client")}
}

func (_c *DB_client_Call) Run(run func()) *DB_client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DB_client_Call) Return(_a0 interface{}) *DB_client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DB_client_Call) RunAndReturn(run func() interface{}) *DB_client_Call {
	_c.Call.Return(run)
	return _c
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
